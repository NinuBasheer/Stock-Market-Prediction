import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
 
# Fetching Apple stock data
apple = yf.Ticker("AAPL")
historical_data = apple.history(start="2016-01-01", end="2020-12-31")
 
# Extracting the 'Close' prices
prices = historical_data[['Close']].values
 
# Normalizing the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_prices = scaler.fit_transform(prices)
 
# Splitting data into training and testing sets
train_size = int(len(scaled_prices) * 0.8)
test_size = len(scaled_prices) - train_size
train_data, test_data = scaled_prices[0:train_size,:], scaled_prices[train_size:len(scaled_prices),:]
 
# Function to create dataset with look back
def create_dataset(dataset, look_back=1):
    data_X, data_Y = [], []
    for i in range(len(dataset) - look_back - 1):
        a = dataset[i:(i + look_back), 0]
        data_X.append(a)
        data_Y.append(dataset[i + look_back, 0])
    return np.array(data_X), np.array(data_Y)
 
# Reshaping data into X=t and Y=t+1
look_back = 30  # You can adjust this window size
train_X, train_Y = create_dataset(train_data, look_back)
test_X, test_Y = create_dataset(test_data, look_back)
 
# Reshape input to be [samples, time steps, features]
train_X = np.reshape(train_X, (train_X.shape[0], 1, train_X.shape[1]))
test_X = np.reshape(test_X, (test_X.shape[0], 1, test_X.shape[1]))
 
# Build LSTM model
model = Sequential()
model.add(LSTM(units=50, input_shape=(1, look_back)))
model.add(Dropout(0.2))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')
 
# Train the model
model.fit(train_X, train_Y, epochs=100, batch_size=32)
 
# Predictions
train_predict = model.predict(train_X)
test_predict = model.predict(test_X)
 
# Invert predictions to original scale
train_predict = scaler.inverse_transform(train_predict)
train_Y = scaler.inverse_transform([train_Y])
test_predict = scaler.inverse_transform(test_predict)
test_Y = scaler.inverse_transform([test_Y])
 
# Plotting the results
plt.figure(figsize=(10, 6))
plt.plot(prices, label='Actual Prices')
plt.plot(np.concatenate((train_predict, test_predict)), label='Predicted Prices')
plt.title('Apple Stock Price Prediction using LSTM')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
